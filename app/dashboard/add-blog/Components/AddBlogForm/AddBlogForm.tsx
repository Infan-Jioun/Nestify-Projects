"use client";

import React, { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { useDispatch, useSelector } from "react-redux";
import { AppDispatch, RootState } from "@/lib/store";
import { setButtonLoader } from "@/app/features/loader/loaderSlice";
import { createBlogPost } from "@/app/features/blog/blogSlice";
import { BlogPost } from "@/app/Types/BlogPost";
import { imageUpload } from "@/hooks/useImageUpload";
import Title from "./Components/Title";
import Slug from "./Components/Slug";
import Excerpt from "./Components/Excerpt";
import Content from "./Components/Content";
import ImageFeatured from "./Components/ImageFeatured";
import AuthorName from "./Components/AuthorName";
import { Tags } from "./Components/Tags";
import Categories from "./Components/Categories";

export default function AddBlogForm() {
    const dispatch = useDispatch<AppDispatch>();
    const buttonLoader = useSelector(
        (state: RootState) => state.loader.buttonLoader
    );
    const { operationLoading, operationError } = useSelector(
        (state: RootState) => state.blog
    );

    const [categories, setCategories] = useState<string[]>([]);
    const [tags, setTags] = useState<string[]>([]);

    const {
        register,
        handleSubmit,
        reset,
        setValue,
        watch,
        formState: { errors, isValid },
    } = useForm<BlogPost>({
        mode: "onChange",
    });

    const handleCategoriesChange = (newCategories: string[]) => {
        setCategories(newCategories);
        setValue("categories", newCategories, { shouldValidate: true });
    };

    const handleTagsChange = (newTags: string[]) => {
        setTags(newTags);
        setValue("tags", newTags, { shouldValidate: true });
    };

    // Calculate read time based on content
    const calculateReadTime = (content: string): number => {
        const wordsPerMinute = 200;
        const words = content.trim().split(/\s+/).length;
        return Math.ceil(words / wordsPerMinute);
    };

    const onSubmit: SubmitHandler<BlogPost> = async (data) => {
        dispatch(setButtonLoader(true));
        try {
            let imageUrl = "";

            if (data.featuredImage instanceof File) {
                const imageUrlFromUpload = await imageUpload(data.featuredImage);
                imageUrl = imageUrlFromUpload;
            } else if (typeof data.featuredImage === "string") {
                imageUrl = data.featuredImage;
            }

            // Calculate read time
            const readTime = calculateReadTime(data.content || "");

            // Prepare payload according to BlogPost type requirements
            const payload = {
                title: data.title || "",
                slug: data.slug || "",
                excerpt: data.excerpt || "",
                content: data.content || "",
                featuredImage: imageUrl,
                categories: categories,
                tags: tags,
                author: {
                    name: data.author?.name || "",
                    bio: data.author?.bio || "",
                    avatar: data.author?.avatar || "", // Add if required
                },
                publishedAt: new Date().toISOString(),
                isPublished: true,
                // Include all required fields from BlogPost type
                _id: "", // Will be generated by the server
                readTime: readTime,
                // These will be set by the server or have default values
                views: 0,
                likes: 0,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
            };

            console.log("Final Blog Payload:", payload);

            // Dispatch to Redux - use the correct type casting if needed
            const result = await dispatch(createBlogPost(payload as BlogPost));

            if (createBlogPost.fulfilled.match(result)) {
                // Success handling
                console.log("Blog post created successfully:", result.payload);

                // Reset form
                reset();
                setCategories([]);
                setTags([]);

                // Show success message
                alert("Blog post published successfully!");

            } else {
                throw new Error(result.payload as string);
            }

        } catch (err) {
            console.error("Error creating blog:", err);
            alert("Failed to publish blog post. Please try again.");
        } finally {
            dispatch(setButtonLoader(false));
        }
    };

    // Alternative approach: Update the thunk call to match your API expectations
    const onSubmitAlternative: SubmitHandler<BlogPost> = async (data) => {
        dispatch(setButtonLoader(true));
        try {
            let imageUrl = "";

            if (data.featuredImage instanceof File) {
                const imageUrlFromUpload = await imageUpload(data.featuredImage); // string
                imageUrl = imageUrlFromUpload;
            } else if (typeof data.featuredImage === "string") {
                imageUrl = data.featuredImage;
            }

            // Create a minimal payload that matches your API expectations
            const minimalPayload = {
                title: data.title,
                slug: data.slug,
                excerpt: data.excerpt,
                content: data.content,
                featuredImage: imageUrl,
                categories: categories,
                tags: tags,
                author: {
                    name: data.author?.name,
                    bio: data.author?.bio,
                },
                // Let the server handle these fields
                isPublished: true,
            };

            console.log("Minimal Blog Payload:", minimalPayload);

            // If the thunk is still causing issues, use direct API call
            const response = await fetch('/api/blog', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(minimalPayload),
            });

            if (!response.ok) {
                throw new Error('Failed to create blog post');
            }

            const result = await response.json();
            console.log("Blog post created successfully:", result);

            // Reset form
            reset();
            setCategories([]);
            setTags([]);

            alert("Blog post published successfully!");

        } catch (err) {
            console.error("Error creating blog:", err);
            alert("Failed to publish blog post. Please try again.");
        } finally {
            dispatch(setButtonLoader(false));
        }
    };

    // Watch form values for real-time validation feedback
    const watchedTitle = watch("title");
    const watchedSlug = watch("slug");
    const watchedContent = watch("content");

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-8 px-4 sm:px-6 lg:px-8">
            <div className="max-w-7xl mx-auto">
                {/* Header */}
                <div className="text-center mb-8">
                    <h1 className="text-3xl font-bold text-gray-900 mb-2">
                        Create New Blog Post
                    </h1>
                    <p className="text-gray-600 max-w-2xl mx-auto">
                        Craft your amazing content with our intuitive editor. Fill in the details below and share your story with the world.
                    </p>
                </div>

                {/* Operation Error Display */}
                {operationError && (
                    <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-xl">
                        <div className="flex items-center">
                            <svg className="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span className="text-red-700 font-medium">{operationError}</span>
                        </div>
                    </div>
                )}

                <form
                    onSubmit={handleSubmit(onSubmitAlternative)}
                    className="space-y-8 bg-white rounded-2xl shadow-xl p-6 sm:p-8 border border-gray-200"
                >
                    {/* Progress Indicator */}
                    <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                        <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium text-blue-900">Completion Status</span>
                            <span className="text-sm text-blue-700">
                                {[
                                    watchedTitle?.length > 0,
                                    watchedSlug?.length > 0,
                                    watchedContent?.length > 0,
                                    categories.length > 0
                                ].filter(Boolean).length}/4
                            </span>
                        </div>
                        <div className="w-full bg-blue-200 rounded-full h-2">
                            <div
                                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                style={{
                                    width: `${([
                                        watchedTitle?.length > 0,
                                        watchedSlug?.length > 0,
                                        watchedContent?.length > 0,
                                        categories.length > 0
                                    ].filter(Boolean).length / 4) * 100}%`
                                }}
                            />
                        </div>
                    </div>

                    {/* Main Content Grid */}
                    <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">
                        {/* Left Column - Main Content (3/4 width) */}
                        <div className="xl:col-span-3 space-y-6">
                            {/* Title */}
                            <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
                                <div className="flex items-center justify-between mb-4">
                                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                                        <svg className="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                        </svg>
                                        Title & Content
                                    </h3>
                                    {watchedTitle?.length > 0 && (
                                        <span className="text-sm text-green-600 font-medium flex items-center">
                                            <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                            </svg>
                                            Ready
                                        </span>
                                    )}
                                </div>
                                <div className="space-y-6">
                                    <Title register={register} errors={errors} />
                                    <Slug register={register} errors={errors} />
                                    <Excerpt register={register} errors={errors} />
                                    <Content register={register} errors={errors} />
                                </div>
                            </div>
                            <div className="bg-gradient-to-br from-orange-50 to-amber-50 rounded-xl p-6 border border-orange-200">
                                <div className="flex items-center justify-between mb-4">
                                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                                        <svg className="w-5 h-5 text-orange-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                                        </svg>
                                        Categories
                                    </h3>
                                    {categories.length > 0 && (
                                        <span className="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                                            {categories.length}/5
                                        </span>
                                    )}
                                </div>
                                <Categories
                                    selectedCategories={categories}
                                    onCategoriesChange={handleCategoriesChange}
                                    maxCategories={5}
                                />
                            </div>
                        </div>

                        {/* Right Column - Sidebar (1/4 width) */}
                        <div className="xl:col-span-1 space-y-6">
                            {/* Publish Card */}
                            <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-6 border border-green-200">
                                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                    <svg className="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    Publishing
                                </h3>
                                <div className="space-y-4">
                                    <div className="flex items-center justify-between text-sm">
                                        <span className="text-gray-600">Status</span>
                                        <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">
                                            Ready to Publish
                                        </span>
                                    </div>
                                    <button
                                        type="submit"
                                        disabled={buttonLoader || operationLoading || !isValid}
                                        className="w-full px-4 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 disabled:opacity-50 disabled:transform-none disabled:hover:shadow-lg group"
                                    >
                                        {buttonLoader || operationLoading ? (
                                            <div className="flex items-center justify-center">
                                                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                                                Publishing...
                                            </div>
                                        ) : (
                                            <div className="flex items-center justify-center">
                                                <svg className="w-4 h-4 text-white mr-2 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                                                </svg>
                                                Publish Now
                                            </div>
                                        )}
                                    </button>
                                </div>
                            </div>

                            {/* Featured Image Card */}
                            <div className="bg-gradient-to-br from-purple-50 to-violet-50 rounded-xl p-6 border border-purple-200">
                                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                    <svg className="w-5 h-5 text-purple-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    Featured Image
                                </h3>
                                <ImageFeatured setValue={setValue} />
                            </div>

                            {/* Categories Card */}


                            {/* Tags Card */}
                            <div className="bg-gradient-to-br from-pink-50 to-rose-50 rounded-xl p-6 border border-pink-200">
                                <div className="flex items-center justify-between mb-4">
                                    <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                                        <svg className="w-5 h-5 text-pink-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                        </svg>
                                        Tags
                                    </h3>
                                    {tags.length > 0 && (
                                        <span className="text-xs bg-pink-100 text-pink-800 px-2 py-1 rounded-full">
                                            {tags.length}/10
                                        </span>
                                    )}
                                </div>
                                <Tags
                                    tags={tags}
                                    onTagsChange={handleTagsChange}
                                    placeholder="Add tags..."
                                    maxTags={10}
                                />
                            </div>

                            {/* Author Info Card */}
                            <div className="bg-gradient-to-br from-cyan-50 to-blue-50 rounded-xl p-6 border border-cyan-200 mt-3">
                                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                    <svg className="w-5 h-5 text-cyan-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                    </svg>
                                    Author
                                </h3>
                                <div className="space-y-4">
                                    <AuthorName register={register} errors={errors} />
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">
                                            Author Bio
                                        </label>
                                        <textarea
                                            {...register("author.bio")}
                                            className="w-full border border-gray-300 rounded-lg p-3 focus:border-cyan-500 focus:ring-2 focus:ring-cyan-200 transition-colors text-sm resize-none"
                                            rows={3}
                                            placeholder="Brief description about the author..."
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

                {/* Quick Stats */}
                <div className="mt-8 grid grid-cols-2 lg:grid-cols-4 gap-4">
                    <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-200 text-center">
                        <div className="text-xl font-bold text-blue-600">{categories.length}/5</div>
                        <div className="text-sm text-gray-600">Categories</div>
                    </div>
                    <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-200 text-center">
                        <div className="text-xl font-bold text-pink-600">{tags.length}/10</div>
                        <div className="text-sm text-gray-600">Tags</div>
                    </div>
                    <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-200 text-center">
                        <div className="text-xl font-bold text-green-600">
                            {watchedContent?.length > 0 ? "✓" : "✗"}
                        </div>
                        <div className="text-sm text-gray-600">Content</div>
                    </div>
                    <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-200 text-center">
                        <div className="text-xl font-bold text-purple-600">
                            {watchedTitle?.length > 0 ? "✓" : "✗"}
                        </div>
                        <div className="text-sm text-gray-600">Title</div>
                    </div>
                </div>
            </div>
        </div>
    );
}